name: CI

on:
  push:
    branches:
      - "master"
      - "maintenance/.+"
  pull_request:
    branches:
      - "master"
      - "maintenance/.+"
  schedule:
    # Nightly tests run on master by default:
    #   Scheduled workflows run on the latest commit on the default or base branch.
    #   (from https://help.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events-schedule)
    - cron: "0 0 * * *"

jobs:
  test:
    if: (github.event_name == 'schedule' && github.repository == 'openforcefield/openforcefield') || (github.event_name != 'schedule')
    name: Test on ${{ matrix.cfg.os }}, Python ${{ matrix.python-version }}, RDKit=${{ matrix.cfg.rdkit }}, OpenEye=${{ matrix.cfg.openeye }}
    runs-on: ${{ matrix.cfg.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - 3.6
          - 3.7
          # Uncomment when ready ;)
          # - 3.8
        cfg:
          - os: ubuntu-latest
            rdkit: "true"
            openeye: "false"

          - os: ubuntu-latest
            rdkit: "false"
            openeye: "true"

          - os: ubuntu-latest
            rdkit: "true"
            openeye: "true"

          - os: macOS-latest
            rdkit: "true"
            openeye: "false"

    env:
      CI_OS: ${{ matrix.cfg.os }}
      RDKIT: ${{ matrix.cfg.rdkit }}
      OPENEYE: ${{ matrix.cfg.openeye }}
      PYVER: ${{ matrix.python-version }}
      OE_LICENSE: ${{ github.workspace }}/oe_license.txt
      PACKAGE: openforcefield

    steps:
      - uses: actions/checkout@v2

      - name: Additional info about the build
        shell: bash
        run: |
          uname -a
          df -h
          ulimit -a

      - name: Fix conda permissions in MacOS
        shell: bash
        if: startsWith(matrix.cfg.os, 'macOS')
        run: |
          sudo chown -R $(id -u):$(id -g) ${CONDA}

      - name: Configure conda
        shell: bash
        run: |
          . devtools/gh-actions/initialize_conda.sh
          conda activate
          conda config --set always_yes yes
          conda config --add channels omnia --add channels conda-forge --add channels openeye
          conda install --quiet conda conda-build jinja2 anaconda-client
          conda update --quiet --all
          conda info --all
          conda list

      - name: Decrypt OpenEye license
        shell: bash
        env:
          ENC_OE_LICENSE: ${{ secrets.OE_LICENSE__EXP_JUN2020 }}
        run: |
          echo "${ENC_OE_LICENSE}" > ${OE_LICENSE}

      - name: Prepare test environment
        shell: bash
        run: |
          . devtools/gh-actions/initialize_conda.sh
          conda activate
          python devtools/scripts/create_conda_env.py -n=test -p=$PYVER devtools/conda-envs/test_env.yaml
          conda activate test
          if [[ "$RDKIT" == true ]]; then
            conda install rdkit;
          fi
          if [[ "$OPENEYE" == true ]]; then
            conda install openeye-toolkits
            python -c "from openeye import oechem; assert oechem.OEChemIsLicensed()"
          fi
          python -m pip install --no-deps .

      - name: Run unit tests
        shell: bash
        run: |
          . devtools/gh-actions/initialize_conda.sh
          conda activate test
          PYTEST_ARGS="-r fE --tb=short"
          # coverage options
          PYTEST_ARGS+=" --cov=$PACKAGE --cov-config=setup.cfg"
          # excludes
          PYTEST_ARGS+=" --ignore=openforcefield/tests/test_examples.py"
          if [[ "$RDKIT" == true && "$OPENEYE" == true ]]; then
            PYTEST_ARGS+="--doctest-modules"
          fi
          pytest $PYTEST_ARGS $PACKAGE/

      - name: Run examples
        shell: bash
        run: |
          . devtools/gh-actions/initialize_conda.sh
          conda activate test
          PYTEST_ARGS="-r fE --tb=short"
          PYTEST_ARGS+=" --nbval-lax"
          PYTEST_ARGS+=" --ignore=examples/deprecated"
          if [[ "$RDKIT" == false && "$OPENEYE" == true ]]; then
            PYTEST_ARGS+=" --ignore=examples/check_dataset_parameter_coverage"
            PYTEST_ARGS+=" --ignore=examples/QCArchive_interface"
          fi
          pytest $PYTEST_ARGS examples/ openforcefield/tests/test_examples.py

      - name: Codecov
        uses: codecov/codecov-action@v1

  docs:
    name: Test documentation
    runs-on: ubuntu-latest

    env:
      CI_OS: ubuntu-latest
      RDKIT: "true"
      OPENEYE: "true"
      PYVER: "3.7"
      OE_LICENSE: ${{ github.workspace }}/oe_license.txt

    steps:
      - uses: actions/checkout@v2

      - name: Additional info about the build
        shell: bash
        run: |
          uname -a
          df -h
          ulimit -a

      - name: Fix conda permissions in MacOS
        shell: bash
        if: startsWith(matrix.cfg.os, 'macOS')
        run: |
          sudo chown -R $(id -u):$(id -g) ${CONDA}

      - name: Configure conda
        shell: bash
        run: |
          . devtools/gh-actions/initialize_conda.sh
          conda activate
          conda config --set always_yes yes
          conda config --add channels omnia --add channels conda-forge --add channels openeye
          conda install --quiet conda conda-build jinja2 anaconda-client
          conda update --quiet --all
          conda info --all
          conda list

      - name: Decrypt OpenEye license
        shell: bash
        env:
          ENC_OE_LICENSE: ${{ secrets.OE_LICENSE__EXP_JUN2020 }}
        run: |
          echo "${ENC_OE_LICENSE}" > ${OE_LICENSE}

      - name: Prepare docs environment
        shell: bash
        run: |
          . devtools/gh-actions/initialize_conda.sh
          conda activate
          python devtools/scripts/create_conda_env.py -n=docs -p=$PYVER docs/environment.yml
          conda activate docs
          conda install pytest
          # JRG: We need to patch `m2r`, which is now incompatible with sphinx=3
          conda remove --force m2r
          pip install https://github.com/CrossNox/m2r/archive/ee7c81842e62034ffb55ae07798b0a2dc108ad29.zip
          # end of m2r patch
          python -m pip install --no-deps .

      - name: Test Readme links
        shell: bash
        run: |
          . devtools/gh-actions/initialize_conda.sh
          conda activate docs
          PYTEST_ARGS="-r fE --tb=short"
          pytest $PYTEST_ARGS openforcefield/tests/test_links.py

      - name: Build docs
        shell: bash
        if: always()
        run: |
          . devtools/gh-actions/initialize_conda.sh
          conda activate docs
          cd docs
          make html SPHINXOPTS="-W --keep-going -n"

  lint:
    name: Lint checks
    runs-on: ubuntu-latest

    env:
      CI_OS: ubuntu-latest
      RDKIT: "true"
      OPENEYE: "true"
      PYVER: "3.7"
      OE_LICENSE: ${{ github.workspace }}/oe_license.txt
      PACKAGE: openforcefield

    steps:
      - uses: actions/checkout@v2

      - name: Additional info about the build
        shell: bash
        run: |
          uname -a
          df -h
          ulimit -a

      - name: Fix conda permissions in MacOS
        shell: bash
        if: startsWith(matrix.cfg.os, 'macOS')
        run: |
          sudo chown -R $(id -u):$(id -g) ${CONDA}

      - name: Configure conda
        shell: bash
        run: |
          . devtools/gh-actions/initialize_conda.sh
          conda activate
          conda config --set always_yes yes
          conda config --add channels omnia --add channels conda-forge --add channels openeye
          conda install --quiet conda conda-build jinja2 anaconda-client
          conda update --quiet --all
          conda info --all
          conda list

      - name: Decrypt OpenEye license
        shell: bash
        env:
          ENC_OE_LICENSE: ${{ secrets.OE_LICENSE__EXP_JUN2020 }}
        run: |
          echo "${ENC_OE_LICENSE}" > ${OE_LICENSE}

      - name: Prepare lint environment
        shell: bash
        run: |
          . devtools/gh-actions/initialize_conda.sh
          conda activate
          python devtools/scripts/create_conda_env.py -n=lint -p=$PYVER devtools/conda-envs/test_env.yaml
          conda activate lint
          if [[ "$RDKIT" == true ]]; then
            conda install rdkit;
          fi
          if [[ "$OPENEYE" == true ]]; then
            conda install openeye-toolkits
            python -c "from openeye import oechem; assert oechem.OEChemIsLicensed()"
          fi
          conda install black isort pylint flake8 flake8-docstrings
          python -m pip install --no-deps .

      - name: Run pylint
        shell: bash
        run: |
          . devtools/gh-actions/initialize_conda.sh
          conda activate lint
          pylint $PACKAGE/

      - name: Run flake8
        if: always()
        run: |
          . devtools/gh-actions/initialize_conda.sh
          conda activate lint
          flake8 $PACKAGE/

      - name: Run isort
        shell: bash
        if: always()
        run: |
          . devtools/gh-actions/initialize_conda.sh
          conda activate lint
          isort --recursive --check-only $PACKAGE/

      - name: Run black check
        shell: bash
        if: always()
        run: |
          . devtools/gh-actions/initialize_conda.sh
          conda activate lint
          black --check $PACKAGE/ --exclude=$PACKAGE/_version.py